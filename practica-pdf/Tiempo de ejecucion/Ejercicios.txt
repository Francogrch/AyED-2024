Ejercicio 4

a) 3^n es de O(2^n)

Buscamos C
3^n <= C.2^n
3^n / 2^n <= C
(3/2)^n <= C
Cuanto mas crezca n no hay un C que 2^n <= 3^n

Falso


b) n + log2(n) es de O(n)

n <= n
n <= c.n
Buscamos C
n <= Cn
n/n <= C
1 <= C

Existe un C >= 1 para todas las n tal que n <= n. Debido a que C <= n/n por ende siempre va a dar 1. 

c1= 1
n0 = 0

Segundo termino
log2(n) es de O(n)
log2(n) <= n

Buscamos C
log2(n) <= c.n
log2(n)/n <= c

n0= 1
c2= 1

Cuando N tiende a infitno, log2(n)/n va a tender a 0, por lo que nunca va a ser > C

c = 1 + 1
n0 = 1

n + log2(n) <= C.n
1 + log2(1) <= 2.1
1 <= 2

Verdadero


c) n^1/2 + 10^20 es de O (n^1/2)

n^1/2 <= n^1/2
Buscamos C
n^1/2 <= c.n^1/2
1 <= C
Para C >= 1 ,n^1/2 <= c.n^1/2   
c1 = 1
n0 = 0

Segundo termino
10^20 <= n^1/2
10^20 <= c.n^1/2
c = 10^20
10^20 <= 10^20.n^1/2
1 <= n^1/2
1 <= n/2
2.1 <= n
2 <= n

c2 = 10^20
n0 = 2

Todo
c = 10^20 + 1
n0 = 2

n^1/2 + 10^20 <= (10^20 + 1)n^1/2

T(n) es de O(c.n^1/2) para un n0 = 2 y un c = 10^20+1



d) 3n+17, n < 100
   317, n >= 100
   
   Es de O(n)
   
   3n + 17 <= c.n
   	
   	3n <= c.n
   	3n/ n <= c
   	3 <= c1
   	Es verdadero ya que para toda n , c >= 3.
   	
   	17 <= c.n
   	c2 = 17
   	1 <= n
   
   Ct = (17+3)
   n0 = 1
   
   3n+17 <= 20n
   Esto se cumple, para un n < 100
   
   317 >= c.n
   317 >= c.100
   317/100 >=c
   3,17 <= c
   
   n0 >= 100
   c >= 3,17
   
   Existe c > 0 y n0 tales que:
   	T(n) <= c.f(n) para todo n >= 100
   	317 <= 3,17.n para todo n>= 100

e) p(n) = 3n^5 + 8n^4 + 2n + 1 es O(n^5)
	
	3n^5 <= O(n^5)
	
	3n^5 <= c(n^5)
	3 <= c
	para cualquier n
	
	Por ende, existe c >= 3 y cualquier n0 tales que:
		3n^5 + 8n^4 + 2n + 1  <= c(n^5) para todo n >= 0 
	
	8n^4 <= n^5
		8n^4 <= c(n^4 . n)
		8n^4 <= c . n^4 . n
		8n^4/n^4 <= c.n
		8 <= c.n
		c = 8
		8 <= 8n
		1 <= n
		
		n = 1
		c = 8
	2n <= n^5
		2n <= c.n^5
		2n <= c.n.n^4
		c = 2
	
	2n <= 2n.n^4
		1 <= n^4
		raiz4(1) <= n
		1 <= n
		
		n = 1
		c = 2
	1 <= n^5
		1 <= c.n^5
		c = 1
		1 <= n^5
		raiz5(1) <= n
		1 <=n
		
		c = 1
		n = 1
		
	3n^5 + 8n^4 + 2n + 1 es O(n^5)
		Ct = 8+2+2+1 = 13
		n0 = 2
		
		3n^5 + 8n^4 + 2n + 1 <= (13)n^5 con un n0 >= 2
	
		
	


f) n^k es O(n^k)

	n^k <= c.n^k
	(n^k)/n^k <= c
	c <= 1
	n0 = (n^k)
	
	Segun la definicion de Big O n^k es de O(n^k)


Ejercicio 5

a) Todos los algoritmos terminan, ninguno entra en buble infinito.

b) El randomUno realiza cantidad de operaciones dependendiendo de la varialbe n y de la funcion ran_int(). Hace sumatorio de 0 a n { sumatoria de 0 a i}^i
El randomDos hace una sumatoria de tiempo lineal n para cargar el primer vector. Luego (una sumatorio de 0 a n i.{sumatoria de ct1 + ct2})/n
El randomTres realiza dos operaciones de tiempo lineal dependientes de n. sumatoria de 0 a n + sumatoria de 0 a n = 2n veces

Ejercicio 6

	a) O(log2(n))
	1 hora  - tamanio 1024
	4 horas - ?

	log2(1024) = 10 = 1 hora
	10 * 4 = 40 operaciones en 4 horas

	log2(n) = 40
	2^40 = n
	El mayor tamanio seria 2^40 elementos.
	
b) T(n) operacion 
	10.000 operacion por segundo
	t(n) = n^2
	n=2000 cuanto tarda?
	
	n^2 = 10.000 -> 1 segundo
	
	2000^2 = 4000 -> x segundos
	
	4000/10000 = 4/10 = 0,4
	El algoritmo tarda 0,4 segundos.
	

Ejercicio 8
	
	Punto 1
	int c = 1
	while (c < n){
		algo_deO(1)
		c = 2 * c
		}
 	
Ejercicio 9
C) 
static public int rec4(int n){
	return n % 2;
}

Lineal <= O(2^(n/2))
 	

Ejercicio 11







 




 

 





















